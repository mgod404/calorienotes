{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Button } from 'react-native-paper';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar BarCodeScannerComponent = function BarCodeScannerComponent(props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scanned = _useState4[0],\n      setScanned = _useState4[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$BarCodeScanner, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n            case 2:\n              _await$BarCodeScanner = _context.sent;\n              status = _await$BarCodeScanner.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var handleBarCodeScanned = function handleBarCodeScanned(_ref) {\n    var type = _ref.type,\n        data = _ref.data;\n    setScanned(true);\n    props.setShowScanner();\n    alert(\"Bar code with type \" + type + \" and data \" + data + \" has been scanned!\");\n  };\n\n  if (hasPermission === null) {\n    return _jsx(Text, {\n      children: \"Requesting for camera permission\"\n    });\n  }\n\n  if (hasPermission === false) {\n    return _jsx(Text, {\n      children: \"No access to camera\"\n    });\n  }\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(BarCodeScanner, {\n      onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n      style: StyleSheet.absoluteFillObject\n    }), scanned && _jsx(Button, {\n      style: styles.AndroidSafeArea,\n      onPress: function onPress() {\n        return setScanned(false);\n      },\n      children: \"Tap to Scan Again\"\n    })]\n  });\n};\n\nexport default BarCodeScannerComponent;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  AndroidSafeArea: {\n    paddingTop: Platform.OS === \"android\" ? StatusBar.currentHeight : 0,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    backgroundColor: 'darkviolet'\n  }\n});","map":{"version":3,"sources":["/home/dzony/Documents/Site/calorienotes/components/barcodescanner.tsx"],"names":["React","useState","useEffect","Button","BarCodeScanner","BarCodeScannerComponent","props","hasPermission","setHasPermission","scanned","setScanned","requestPermissionsAsync","status","handleBarCodeScanned","type","data","setShowScanner","alert","styles","container","undefined","StyleSheet","absoluteFillObject","AndroidSafeArea","create","flex","paddingTop","Platform","OS","StatusBar","currentHeight","flexDirection","justifyContent","backgroundColor"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;;;AAEA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,cAAT,QAA+B,sBAA/B;;;;AAMA,IAAMC,uBAAwC,GAAG,SAA3CA,uBAA2C,CAACC,KAAD,EAAW;AACxD,kBAA0CL,QAAQ,CAAC,IAAD,CAAlD;AAAA;AAAA,MAAOM,aAAP;AAAA,MAAsBC,gBAAtB;;AACA,mBAA8BP,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOQ,OAAP;AAAA,MAAgBC,UAAhB;;AAEAR,EAAAA,SAAS,CAAC,YAAM;AAChB,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC4BE,cAAc,CAACO,uBAAf,EAD5B;;AAAA;AAAA;AACWC,cAAAA,MADX,yBACWA,MADX;AAEGJ,cAAAA,gBAAgB,CAACI,MAAM,KAAK,SAAZ,CAAhB;;AAFH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAIC,GALQ,EAKN,EALM,CAAT;;AAOA,MAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,OAAoB;AAAA,QAAjBC,IAAiB,QAAjBA,IAAiB;AAAA,QAAXC,IAAW,QAAXA,IAAW;AACjDL,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAJ,IAAAA,KAAK,CAACU,cAAN;AACAC,IAAAA,KAAK,yBAAuBH,IAAvB,kBAAwCC,IAAxC,wBAAL;AACC,GAJD;;AAMA,MAAIR,aAAa,KAAK,IAAtB,EAA4B;AAC5B,WAAO,KAAC,IAAD;AAAA;AAAA,MAAP;AACC;;AACD,MAAIA,aAAa,KAAK,KAAtB,EAA6B;AAC7B,WAAO,KAAC,IAAD;AAAA;AAAA,MAAP;AACC;;AAED,SACA,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEW,MAAM,CAACC,SAApB;AAAA,eACI,KAAC,cAAD;AACI,MAAA,gBAAgB,EAAEV,OAAO,GAAGW,SAAH,GAAeP,oBAD5C;AAEI,MAAA,KAAK,EAAEQ,UAAU,CAACC;AAFtB,MADJ,EAKKb,OAAO,IACR,KAAC,MAAD;AACI,MAAA,KAAK,EAAES,MAAM,CAACK,eADlB;AAEI,MAAA,OAAO,EAAE;AAAA,eAAMb,UAAU,CAAC,KAAD,CAAhB;AAAA,OAFb;AAAA;AAAA,MANJ;AAAA,IADA;AAcH,CAtCD;;AAwCA,eAAeL,uBAAf;AAEA,IAAMa,MAAM,GAAGG,UAAU,CAACG,MAAX,CAAkB;AAC7BL,EAAAA,SAAS,EAAC;AACNM,IAAAA,IAAI,EAAC;AADC,GADmB;AAI7BF,EAAAA,eAAe,EAAE;AACbG,IAAAA,UAAU,EAAEC,QAAQ,CAACC,EAAT,KAAgB,SAAhB,GAA4BC,SAAS,CAACC,aAAtC,GAAsD,CADrD;AAEbC,IAAAA,aAAa,EAAE,KAFF;AAGbC,IAAAA,cAAc,EAAE,QAHH;AAIbC,IAAAA,eAAe,EAAE;AAJJ;AAJY,CAAlB,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Text, View, StyleSheet, StatusBar, Platform } from 'react-native'\nimport { Button } from 'react-native-paper'\nimport { BarCodeScanner } from 'expo-barcode-scanner'\n\ninterface Props {\n    setShowScanner: () => void,\n}\n\nconst BarCodeScannerComponent: React.FC<Props> = (props) => {\n    const [hasPermission, setHasPermission] = useState(null);\n    const [scanned, setScanned] = useState(false);\n\n    useEffect(() => {\n    (async () => {\n        const { status } = await BarCodeScanner.requestPermissionsAsync();\n        setHasPermission(status === 'granted');\n    })();\n    }, []);\n\n    const handleBarCodeScanned = ({ type, data }) => {\n    setScanned(true);\n    props.setShowScanner();\n    alert(`Bar code with type ${type} and data ${data} has been scanned!`);\n    };\n\n    if (hasPermission === null) {\n    return <Text>Requesting for camera permission</Text>;\n    }\n    if (hasPermission === false) {\n    return <Text>No access to camera</Text>;\n    }\n\n    return (\n    <View style={styles.container}>\n        <BarCodeScanner\n            onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\n            style={StyleSheet.absoluteFillObject}\n        />\n        {scanned && \n        <Button \n            style={styles.AndroidSafeArea} \n            onPress={() => setScanned(false)}>\n                Tap to Scan Again\n        </Button>}\n    </View>\n    );\n};\n\nexport default BarCodeScannerComponent;\n\nconst styles = StyleSheet.create({\n    container:{\n        flex:1,\n    },\n    AndroidSafeArea: {\n        paddingTop: Platform.OS === \"android\" ? StatusBar.currentHeight : 0,\n        flexDirection: 'row',\n        justifyContent: 'center',\n        backgroundColor: 'darkviolet',\n}\n})"]},"metadata":{},"sourceType":"module"}