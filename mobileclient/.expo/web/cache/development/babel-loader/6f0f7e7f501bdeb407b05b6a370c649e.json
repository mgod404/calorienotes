{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Searchbar, List } from 'react-native-paper';\nimport * as SecureStore from 'expo-secure-store';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar MealSearchBarComponent = function MealSearchBarComponent(_ref) {\n  var meal = _ref.meal,\n      setMeal = _ref.setMeal;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchResultsVisible = _useState2[0],\n      setSearchResultsVisible = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      searchedMeal = _useState4[0],\n      setSearchedMeal = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      foundMealsList = _useState6[0],\n      setFoundMealsList = _useState6[1];\n\n  useEffect(function () {\n    setMeal(_objectSpread(_objectSpread({}, meal), {}, {\n      name: searchedMeal\n    }));\n  }, [searchedMeal]);\n  useEffect(function () {\n    setSearchedMeal(meal.name);\n  }, [meal.name]);\n\n  var searchLocalStorageForMeal = function searchLocalStorageForMeal(mealName) {\n    var localStorageMeals, localStorageMealsParsed, mealsFound;\n    return _regeneratorRuntime.async(function searchLocalStorageForMeal$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(SecureStore.getItemAsync('meals'));\n\n          case 2:\n            localStorageMeals = _context.sent;\n\n            if (localStorageMeals) {\n              _context.next = 6;\n              break;\n            }\n\n            SecureStore.setItemAsync('meals', '[]');\n            return _context.abrupt(\"return\");\n\n          case 6:\n            ;\n            localStorageMealsParsed = JSON.parse(localStorageMeals);\n            mealsFound = localStorageMealsParsed.filter(function (element) {\n              return element.name.toLowerCase().includes(mealName.toLowerCase());\n            });\n            return _context.abrupt(\"return\", mealsFound);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var search = function search(mealName) {\n    return _regeneratorRuntime.async(function search$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            setSearchedMeal(mealName);\n\n            if (!mealName) {\n              _context2.next = 11;\n              break;\n            }\n\n            setSearchResultsVisible(true);\n            _context2.t0 = setFoundMealsList;\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(searchLocalStorageForMeal(mealName));\n\n          case 6:\n            _context2.t1 = _context2.sent;\n            (0, _context2.t0)(_context2.t1);\n            console.log(foundMealsList);\n            _context2.next = 13;\n            break;\n\n          case 11:\n            setSearchResultsVisible(false);\n            setFoundMealsList([]);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var removeMealFromStorage = function removeMealFromStorage(mealName) {\n    var localStorage, localStorageParsed, newLocalStorage;\n    return _regeneratorRuntime.async(function removeMealFromStorage$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(SecureStore.getItemAsync('meals'));\n\n          case 2:\n            localStorage = _context3.sent;\n\n            if (localStorage) {\n              _context3.next = 5;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 5:\n            _context3.next = 7;\n            return _regeneratorRuntime.awrap(JSON.parse(localStorage));\n\n          case 7:\n            localStorageParsed = _context3.sent;\n            newLocalStorage = localStorageParsed.filter(function (element) {\n              return element.name !== mealName;\n            });\n            SecureStore.setItemAsync('meals', JSON.stringify(newLocalStorage));\n            setSearchedMeal('');\n            setFoundMealsList(foundMealsList == null ? void 0 : foundMealsList.filter(function (element) {\n              return element.name !== mealName;\n            }));\n\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    style: {\n      flex: 1\n    },\n    children: [_jsx(Searchbar, {\n      placeholder: \"Meal Name\",\n      value: searchedMeal,\n      onChangeText: function onChangeText(input) {\n        return search(input);\n      }\n    }), searchResultsVisible && foundMealsList && foundMealsList.map(function (element, index) {\n      return _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          setMeal({\n            name: element.name,\n            weight: element.weight,\n            carbs: element.carbs,\n            fat: element.fat,\n            protein: element.protein\n          });\n          setFoundMealsList([]);\n          setSearchedMeal(element.name);\n        },\n        children: _jsx(List.Item, {\n          style: styles.searchResult,\n          title: element.name,\n          description: \"Carbs: \" + element.carbs + \" Fat:\" + element.fat + \" Protein:\" + element.protein,\n          right: function right(props) {\n            return _jsx(TouchableOpacity, {\n              onPress: function onPress(e) {\n                e.preventDefault();\n                removeMealFromStorage(element.name);\n              },\n              children: _jsx(List.Icon, _objectSpread(_objectSpread({}, props), {}, {\n                icon: \"window-close\"\n              }))\n            });\n          }\n        })\n      }, index);\n    })]\n  });\n};\n\nexport default MealSearchBarComponent;\nvar styles = StyleSheet.create({\n  searchResult: {\n    elevation: 1\n  }\n});","map":{"version":3,"sources":["/home/dzony/Documents/Site/calorienotes/mobileclient/components/mealsearchbar.tsx"],"names":["React","useState","useEffect","Searchbar","List","SecureStore","MealSearchBarComponent","meal","setMeal","searchResultsVisible","setSearchResultsVisible","searchedMeal","setSearchedMeal","foundMealsList","setFoundMealsList","name","searchLocalStorageForMeal","mealName","getItemAsync","localStorageMeals","setItemAsync","localStorageMealsParsed","JSON","parse","mealsFound","filter","element","toLowerCase","includes","search","console","log","removeMealFromStorage","localStorage","localStorageParsed","newLocalStorage","stringify","flex","input","map","index","weight","carbs","fat","protein","styles","searchResult","props","e","preventDefault","StyleSheet","create","elevation"],"mappings":"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","sourcesContent":["// import React in our code\nimport React, { useState, useEffect } from 'react';\nimport { View, StyleSheet, TouchableOpacity } from 'react-native'\nimport { Searchbar, List } from 'react-native-paper';\nimport * as SecureStore from 'expo-secure-store';\n\nimport { Meal } from '../screens/homescreen';\n\ninterface Props {\n    meal: Meal,\n    setMeal: React.Dispatch<React.SetStateAction<Meal>>\n}\n\nconst MealSearchBarComponent: React.FC<Props> = ({ meal, setMeal }) => {\n    const [searchResultsVisible, setSearchResultsVisible] = useState(false);\n    const [searchedMeal, setSearchedMeal] = useState('');\n    const [foundMealsList, setFoundMealsList] = useState<Meal[]>();\n\n    useEffect(()=> {\n        setMeal({...meal, name: searchedMeal})\n    },[searchedMeal]);\n    useEffect(()=> {\n        setSearchedMeal(meal.name);\n    },[meal.name]);\n\n    const searchLocalStorageForMeal = async (mealName:string) => {\n        const localStorageMeals = await SecureStore.getItemAsync('meals');\n        if(!localStorageMeals){\n            SecureStore.setItemAsync('meals', '[]')\n            return\n        };\n        const localStorageMealsParsed:Meal[] = JSON.parse(localStorageMeals);\n        const mealsFound = localStorageMealsParsed.filter(element => element.name.toLowerCase().includes(mealName.toLowerCase()));\n        return mealsFound\n    };\n    const search = async (mealName: string) => {\n        setSearchedMeal(mealName);\n        if(mealName){\n            setSearchResultsVisible(true);\n            setFoundMealsList(await searchLocalStorageForMeal(mealName));\n            console.log(foundMealsList);\n        }else{\n            setSearchResultsVisible(false);\n            setFoundMealsList([]);\n        }\n    };\n    const removeMealFromStorage = async (mealName: string) => {\n        const localStorage = await SecureStore.getItemAsync('meals');\n        if(!localStorage){\n            return\n        }\n        const localStorageParsed: Meal[] = await JSON.parse(localStorage);\n        const newLocalStorage = localStorageParsed.filter(element => element.name !== mealName);\n        SecureStore.setItemAsync('meals', JSON.stringify(newLocalStorage));\n        setSearchedMeal('');\n        setFoundMealsList(foundMealsList?.filter(element => element.name !== mealName));\n    };\n    return(\n        <View style={{flex:1}}>\n            <Searchbar \n            placeholder='Meal Name'\n            value={searchedMeal}\n            onChangeText={input => search(input)}\n            />\n            {searchResultsVisible && foundMealsList && foundMealsList.map((element, index) => \n                (<TouchableOpacity\n                    key={index}\n                    onPress={() => {\n                        setMeal({\n                            name: element.name,\n                            weight: element.weight,\n                            carbs: element.carbs,\n                            fat: element.fat,\n                            protein: element.protein\n                        });\n                        setFoundMealsList([]);\n                        setSearchedMeal(element.name);\n                    }}\n                >\n                    <List.Item\n                        style={styles.searchResult}\n                        title={element.name}\n                        description={`Carbs: ${element.carbs} Fat:${element.fat} Protein:${element.protein}`}\n                        right={props => \n                            <TouchableOpacity\n                                onPress={(e) => {\n                                    e.preventDefault();\n                                    removeMealFromStorage(element.name);\n                                }}\n                            >\n                                <List.Icon \n                                    {...props} \n                                    icon='window-close'\n                                />\n                            </TouchableOpacity>}\n                    />\n                </TouchableOpacity>)\n            )}\n        </View>\n    )\n}\n\nexport default MealSearchBarComponent\n\nconst styles = StyleSheet.create({\n    searchResult:{\n        elevation: 1\n    }\n})"]},"metadata":{},"sourceType":"module"}