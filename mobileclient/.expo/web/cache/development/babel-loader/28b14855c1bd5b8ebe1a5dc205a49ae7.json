{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useContext } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { Switch } from 'react-native-paper';\nimport { JwtTokenContext } from \"../contexts/jwttoken\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar LoginScreen = function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      errorMessage = _useState6[0],\n      setErrorMessage = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isSwitchOn = _useState8[0],\n      setIsSwitchOn = _useState8[1];\n\n  var onToggleSwitch = function onToggleSwitch() {\n    return setIsSwitchOn(!isSwitchOn);\n  };\n\n  var jwt = useContext(JwtTokenContext);\n\n  if (jwt != null && jwt.jwtRefreshToken && (jwt == null ? void 0 : jwt.jwtRefreshToken) !== '') {\n    console.log(\"Jwt refresh token already found \" + (jwt == null ? void 0 : jwt.jwtRefreshToken));\n    navigation.navigate('Home');\n  }\n\n  var login = function login() {\n    var response, data;\n    return _regeneratorRuntime.async(function login$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"http://192.168.0.242:8000/api/token/\", {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                username: email,\n                password: password\n              })\n            }));\n\n          case 2:\n            response = _context.sent;\n\n            if (!(response.status == 200)) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            data = _context.sent;\n            jwt == null ? void 0 : jwt.setJwtAccessToken(data.access);\n            navigation.navigate('Home');\n\n            if (isSwitchOn) {\n              _context.next = 11;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 11:\n            jwt == null ? void 0 : jwt.setJwtRefreshToken(data.refresh);\n            _context.next = 15;\n            break;\n\n          case 14:\n            setErrorMessage('Wrong email or password');\n\n          case 15:\n            ;\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.loginWrapper,\n    children: [_jsxs(Text, {\n      children: [\"JwtAccessToken: \", jwt == null ? void 0 : jwt.jwtAccessToken, \"  JwtRefreshToken:\", jwt == null ? void 0 : jwt.jwtRefreshToken]\n    }), _jsx(TextInput, {\n      style: styles.input,\n      onChangeText: function onChangeText(input) {\n        return setEmail(input);\n      },\n      value: email,\n      placeholder: \"Email\"\n    }), _jsx(TextInput, {\n      secureTextEntry: true,\n      style: styles.input,\n      onChangeText: function onChangeText(number) {\n        return setPassword(number);\n      },\n      value: password,\n      placeholder: \"Password\"\n    }), _jsxs(View, {\n      style: {\n        flexDirection: 'row'\n      },\n      children: [_jsx(Switch, {\n        color: \"darkviolet\",\n        value: isSwitchOn,\n        onValueChange: onToggleSwitch\n      }), _jsx(Text, {\n        style: {\n          alignSelf: 'center'\n        },\n        children: \"Remember me\"\n      })]\n    }), errorMessage ? _jsx(View, {\n      style: styles.errorView,\n      children: _jsx(Text, {\n        style: {\n          color: 'lightgray'\n        },\n        children: errorMessage\n      })\n    }) : _jsx(_Fragment, {}), _jsxs(View, {\n      style: styles.buttons,\n      children: [_jsx(Button, {\n        onPress: function onPress() {\n          return login();\n        },\n        title: \"Login\",\n        color: \"darkviolet\"\n      }), _jsx(Button, {\n        onPress: function onPress() {\n          return console.log('Bttn pressed');\n        },\n        title: \"sign in\",\n        color: \"darkviolet\"\n      })]\n    })]\n  });\n};\n\nexport default LoginScreen;\nvar styles = StyleSheet.create({\n  loginWrapper: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  input: {\n    height: 40,\n    width: 200,\n    margin: 12,\n    borderBottomWidth: 1,\n    padding: 10\n  },\n  buttons: {\n    width: 170,\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginTop: 20,\n    paddingRight: 10\n  },\n  errorView: {\n    backgroundColor: 'rgba(255, 57, 57, 0.8)',\n    padding: 5,\n    borderRadius: 5\n  }\n});","map":{"version":3,"sources":["/home/dzony/Documents/Site/calorienotes/mobileclient/screens/loginscreen.tsx"],"names":["React","useState","useContext","Switch","JwtTokenContext","LoginScreen","navigation","email","setEmail","password","setPassword","errorMessage","setErrorMessage","isSwitchOn","setIsSwitchOn","onToggleSwitch","jwt","jwtRefreshToken","console","log","navigate","login","fetch","method","headers","body","JSON","stringify","username","response","status","json","data","setJwtAccessToken","access","setJwtRefreshToken","refresh","styles","loginWrapper","jwtAccessToken","input","number","flexDirection","alignSelf","errorView","color","buttons","StyleSheet","create","flex","justifyContent","alignItems","height","width","margin","borderBottomWidth","padding","display","marginTop","paddingRight","backgroundColor","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react'\r\nimport { StyleSheet, TextInput, View, Text, Button } from 'react-native'\r\nimport { Switch } from 'react-native-paper';\r\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\r\n\r\nimport {JwtTokenContext} from '../contexts/jwttoken'\r\n\r\ntype RootStackParamList = {\r\n    Home: undefined\r\n};\r\n\r\ninterface IPdpPageProps {\r\n    navigation: NativeStackNavigationProp<RootStackParamList>\r\n}\r\n\r\n\r\nconst LoginScreen = ({ navigation }: IPdpPageProps) => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    const [isSwitchOn, setIsSwitchOn] = useState(false);\r\n    const onToggleSwitch = () => setIsSwitchOn(!isSwitchOn);\r\n\r\n    const jwt = useContext(JwtTokenContext);\r\n\r\n    if(jwt?.jwtRefreshToken && jwt?.jwtRefreshToken !== ''){\r\n        console.log(`Jwt refresh token already found ${jwt?.jwtRefreshToken}`);\r\n        navigation.navigate('Home');\r\n    }\r\n\r\n    const login = async () => {\r\n        const response = await fetch(`http://192.168.0.242:8000/api/token/`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                username: email,\r\n                password: password\r\n            })\r\n        });\r\n        if(response.status == 200){\r\n            const data = await response.json();\r\n            jwt?.setJwtAccessToken(data.access);\r\n            navigation.navigate('Home');\r\n            if(!isSwitchOn){\r\n                return\r\n            }\r\n            jwt?.setJwtRefreshToken(data.refresh);\r\n        } else {\r\n            setErrorMessage('Wrong email or password');\r\n        };\r\n    };\r\n\r\n    return(\r\n        <View style={styles.loginWrapper}>\r\n            <Text>JwtAccessToken: {jwt?.jwtAccessToken}  JwtRefreshToken:{jwt?.jwtRefreshToken}</Text>\r\n            <TextInput\r\n                style={styles.input}\r\n                onChangeText={(input) => setEmail(input)}\r\n                value={email}\r\n                placeholder='Email'\r\n            />\r\n            <TextInput\r\n                secureTextEntry={true}\r\n                style={styles.input}\r\n                onChangeText={(number)=> setPassword(number)}\r\n                value={password}\r\n                placeholder=\"Password\"\r\n            />\r\n\r\n            <View style={{flexDirection:'row'}}>\r\n            <Switch \r\n                color='darkviolet'\r\n                value={isSwitchOn}\r\n                onValueChange={onToggleSwitch}\r\n                />\r\n            <Text style={{alignSelf:'center'}}>Remember me</Text>\r\n            </View>\r\n\r\n            {errorMessage ?\r\n            <View style={styles.errorView}>\r\n            <Text style={{color:'lightgray'}}>{errorMessage}</Text>\r\n            </View>: <></>}\r\n\r\n            <View style={styles.buttons}>\r\n                <Button \r\n                    onPress={() => login()}\r\n                    title='Login'\r\n                    color='darkviolet'/>\r\n                <Button \r\n                    onPress={() => console.log('Bttn pressed')}\r\n                    title='sign in'\r\n                    color='darkviolet'/>\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default LoginScreen\r\n\r\nconst styles = StyleSheet.create({\r\n    loginWrapper: {\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    input: {\r\n        height: 40,\r\n        width: 200,\r\n        margin: 12,\r\n        borderBottomWidth: 1,\r\n        padding: 10,\r\n    },\r\n    buttons: {\r\n        width:170,\r\n        display:'flex',\r\n        flexDirection:'row',\r\n        justifyContent:'space-between',\r\n        marginTop:20,\r\n        paddingRight:10,\r\n    },\r\n    errorView: {\r\n        backgroundColor:'rgba(255, 57, 57, 0.8)', \r\n        padding:5, \r\n        borderRadius:5\r\n    }\r\n})"]},"metadata":{},"sourceType":"module"}