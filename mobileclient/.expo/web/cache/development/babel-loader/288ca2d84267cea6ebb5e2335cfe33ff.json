{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { Switch } from 'react-native-paper';\nimport * as SecureStore from 'expo-secure-store';\nimport { JwtTokenContext } from \"../contexts/jwttoken\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar LoginScreen = function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      errorMessage = _useState6[0],\n      setErrorMessage = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      rememberMe = _useState8[0],\n      setRememberMe = _useState8[1];\n\n  var onToggleSwitch = function onToggleSwitch() {\n    return setRememberMe(!rememberMe);\n  };\n\n  var jwt = useContext(JwtTokenContext);\n\n  var getNewAccessToken = function getNewAccessToken(refreshToken) {\n    var response, data;\n    return _regeneratorRuntime.async(function getNewAccessToken$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            console.log('fetching new access token');\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(fetch(\"http://192.168.0.242:8000/api/token/refresh/\", {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: \"{\\\"refresh\\\":\\\"\" + refreshToken + \"\\\"}\"\n            }));\n\n          case 4:\n            response = _context.sent;\n\n            if (!(response.status === 200)) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 8:\n            data = _context.sent;\n            jwt == null ? void 0 : jwt.setJwtAccessToken(data.access);\n            console.log('new Access Key obtained');\n\n          case 11:\n            if (!(response.status == 401)) {\n              _context.next = 18;\n              break;\n            }\n\n            jwt == null ? void 0 : jwt.setJwtRefreshToken('');\n            _context.next = 15;\n            return _regeneratorRuntime.awrap(SecureStore.setItemAsync('jwt_refresh_token', ''));\n\n          case 15:\n            setErrorMessage('Token has expired. Please login again.');\n            _context.next = 22;\n            break;\n\n          case 18:\n            jwt == null ? void 0 : jwt.setJwtRefreshToken('');\n            _context.next = 21;\n            return _regeneratorRuntime.awrap(SecureStore.setItemAsync('jwt_refresh_token', ''));\n\n          case 21:\n            setErrorMessage('Unknown error occured. Please login again.');\n\n          case 22:\n            _context.next = 27;\n            break;\n\n          case 24:\n            _context.prev = 24;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0);\n\n          case 27:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 24]], Promise);\n  };\n\n  var checkForRefreshKeyInStorage = function checkForRefreshKeyInStorage() {\n    var storageRefreshToken;\n    return _regeneratorRuntime.async(function checkForRefreshKeyInStorage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(SecureStore.getItemAsync('jwt_refresh_token'));\n\n          case 2:\n            storageRefreshToken = _context2.sent;\n\n            if (!storageRefreshToken) {\n              _context2.next = 9;\n              break;\n            }\n\n            setRememberMe(true);\n            console.log(\"Jwt refresh token already found \" + storageRefreshToken);\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(getNewAccessToken(storageRefreshToken));\n\n          case 8:\n            navigation.navigate('Home');\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    checkForRefreshKeyInStorage();\n  }, []);\n\n  var login = function login() {\n    var response, data;\n    return _regeneratorRuntime.async(function login$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(fetch(\"http://192.168.0.242:8000/api/token/\", {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                username: email,\n                password: password\n              })\n            }));\n\n          case 3:\n            response = _context3.sent;\n\n            if (!(response.status == 200)) {\n              _context3.next = 13;\n              break;\n            }\n\n            _context3.next = 7;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 7:\n            data = _context3.sent;\n            jwt == null ? void 0 : jwt.setJwtAccessToken(data.access);\n            navigation.navigate('Home');\n\n            if (rememberMe) {\n              jwt == null ? void 0 : jwt.setJwtRefreshToken(data.refresh);\n              SecureStore.setItemAsync('jwt_refresh_token', data.refresh);\n            }\n\n            _context3.next = 14;\n            break;\n\n          case 13:\n            setErrorMessage('Wrong email or password');\n\n          case 14:\n            ;\n            _context3.next = 20;\n            break;\n\n          case 17:\n            _context3.prev = 17;\n            _context3.t0 = _context3[\"catch\"](0);\n            _context3.t0 instanceof Error ? setErrorMessage(_context3.t0.message) : setErrorMessage(String(_context3.t0));\n\n          case 20:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 17]], Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.loginWrapper,\n    children: [_jsx(TextInput, {\n      style: styles.input,\n      onChangeText: function onChangeText(input) {\n        return setEmail(input);\n      },\n      value: email,\n      placeholder: \"Email\"\n    }), _jsx(TextInput, {\n      secureTextEntry: true,\n      style: styles.input,\n      onChangeText: function onChangeText(number) {\n        return setPassword(number);\n      },\n      value: password,\n      placeholder: \"Password\"\n    }), _jsxs(View, {\n      style: {\n        flexDirection: 'row'\n      },\n      children: [_jsx(Switch, {\n        color: \"darkviolet\",\n        value: rememberMe,\n        onValueChange: onToggleSwitch\n      }), _jsx(Text, {\n        style: {\n          alignSelf: 'center'\n        },\n        children: \"Remember me\"\n      })]\n    }), errorMessage ? _jsx(View, {\n      style: styles.errorView,\n      children: _jsx(Text, {\n        style: {\n          color: 'lightgray'\n        },\n        children: errorMessage\n      })\n    }) : _jsx(_Fragment, {}), _jsxs(View, {\n      style: styles.buttons,\n      children: [_jsx(Button, {\n        onPress: function onPress() {\n          return login();\n        },\n        title: \"Login\",\n        color: \"darkviolet\"\n      }), _jsx(Button, {\n        onPress: function onPress() {\n          return console.log('Bttn pressed');\n        },\n        title: \"sign in\",\n        color: \"darkviolet\"\n      })]\n    })]\n  });\n};\n\nexport default LoginScreen;\nvar styles = StyleSheet.create({\n  loginWrapper: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  input: {\n    height: 40,\n    width: 200,\n    margin: 12,\n    borderBottomWidth: 1,\n    padding: 10\n  },\n  buttons: {\n    width: 170,\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginTop: 20,\n    paddingRight: 10\n  },\n  errorView: {\n    backgroundColor: 'rgba(255, 57, 57, 0.8)',\n    padding: 5,\n    borderRadius: 5\n  }\n});","map":{"version":3,"sources":["/home/dzony/Documents/Site/calorienotes/mobileclient/screens/loginscreen.tsx"],"names":["React","useState","useContext","useEffect","Switch","SecureStore","JwtTokenContext","LoginScreen","navigation","email","setEmail","password","setPassword","errorMessage","setErrorMessage","rememberMe","setRememberMe","onToggleSwitch","jwt","getNewAccessToken","refreshToken","console","log","fetch","method","headers","body","response","status","json","data","setJwtAccessToken","access","setJwtRefreshToken","setItemAsync","error","checkForRefreshKeyInStorage","getItemAsync","storageRefreshToken","navigate","login","JSON","stringify","username","refresh","Error","message","String","styles","loginWrapper","input","number","flexDirection","alignSelf","errorView","color","buttons","StyleSheet","create","flex","justifyContent","alignItems","height","width","margin","borderBottomWidth","padding","display","marginTop","paddingRight","backgroundColor","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\r\nimport { StyleSheet, TextInput, View, Text, Button } from 'react-native'\r\nimport { Switch } from 'react-native-paper';\r\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\r\nimport * as SecureStore from 'expo-secure-store'\r\n\r\nimport {JwtTokenContext} from '../contexts/jwttoken'\r\n\r\ntype RootStackParamList = {\r\n    Home: undefined\r\n};\r\n\r\ninterface NavigationProps {\r\n    navigation: NativeStackNavigationProp<RootStackParamList>\r\n}\r\n\r\ninterface NewAccessTokenResponse {\r\n    access: string\r\n}\r\n\r\n\r\nconst LoginScreen = ({ navigation }: NavigationProps) => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    const [rememberMe, setRememberMe] = useState(false);\r\n    const onToggleSwitch = () => setRememberMe(!rememberMe);\r\n\r\n    const jwt = useContext(JwtTokenContext);\r\n\r\n    const getNewAccessToken = async (refreshToken:string) => {\r\n        try{\r\n            console.log('fetching new access token')\r\n            const response = await fetch(`http://192.168.0.242:8000/api/token/refresh/`,{\r\n                method: 'POST',\r\n                headers:{\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: `{\"refresh\":\"${refreshToken}\"}`\r\n            })\r\n            if(response.status === 200){\r\n                const data:NewAccessTokenResponse = await response.json();\r\n                jwt?.setJwtAccessToken(data.access);\r\n                console.log('new Access Key obtained');\r\n            }if(response.status == 401){\r\n                jwt?.setJwtRefreshToken('');\r\n                await SecureStore.setItemAsync('jwt_refresh_token', '');\r\n                setErrorMessage('Token has expired. Please login again.');\r\n            }else{\r\n                jwt?.setJwtRefreshToken('');\r\n                await SecureStore.setItemAsync('jwt_refresh_token', '');\r\n                setErrorMessage('Unknown error occured. Please login again.');\r\n            }\r\n        }\r\n        catch (e){\r\n            console.error(e);\r\n        }\r\n    }\r\n    const checkForRefreshKeyInStorage = async () => {\r\n        const storageRefreshToken = await SecureStore.getItemAsync('jwt_refresh_token');\r\n        if(storageRefreshToken){\r\n            //REFRESH TOKEN SAVED AND FOUND, PROCEED 'REMEMBER ME' FUNC FROM HERE \r\n            setRememberMe(true);\r\n            console.log(`Jwt refresh token already found ${storageRefreshToken}`);\r\n            await getNewAccessToken(storageRefreshToken);\r\n            navigation.navigate('Home');\r\n        }\r\n    }\r\n\r\n    useEffect(()=> {\r\n        checkForRefreshKeyInStorage();\r\n    },[]);\r\n\r\n    const login = async () => {\r\n        try {\r\n            const response = await fetch(`http://192.168.0.242:8000/api/token/`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    username: email,\r\n                    password: password\r\n                })\r\n            });\r\n            if(response.status == 200){\r\n                const data = await response.json();\r\n                jwt?.setJwtAccessToken(data.access);\r\n                navigation.navigate('Home');\r\n                if(rememberMe){\r\n                    jwt?.setJwtRefreshToken(data.refresh);\r\n                    SecureStore.setItemAsync('jwt_refresh_token', data.refresh);\r\n                }\r\n            } else {\r\n                setErrorMessage('Wrong email or password');\r\n            };\r\n        }\r\n        catch(e) {\r\n            e instanceof Error ? setErrorMessage(e.message): setErrorMessage(String(e))\r\n        }\r\n    };\r\n\r\n    return(\r\n        <View style={styles.loginWrapper}>\r\n            <TextInput\r\n                style={styles.input}\r\n                onChangeText={(input) => setEmail(input)}\r\n                value={email}\r\n                placeholder='Email'\r\n            />\r\n            <TextInput\r\n                secureTextEntry={true}\r\n                style={styles.input}\r\n                onChangeText={(number)=> setPassword(number)}\r\n                value={password}\r\n                placeholder=\"Password\"\r\n            />\r\n\r\n            <View style={{flexDirection:'row'}}>\r\n            <Switch \r\n                color='darkviolet'\r\n                value={rememberMe}\r\n                onValueChange={onToggleSwitch}\r\n                />\r\n            <Text style={{alignSelf:'center'}}>Remember me</Text>\r\n            </View>\r\n\r\n            {errorMessage ?\r\n            <View style={styles.errorView}>\r\n            <Text style={{color:'lightgray'}}>{errorMessage}</Text>\r\n            </View>: <></>}\r\n\r\n            <View style={styles.buttons}>\r\n                <Button \r\n                    onPress={() => login()}\r\n                    title='Login'\r\n                    color='darkviolet'/>\r\n                <Button \r\n                    onPress={() => console.log('Bttn pressed')}\r\n                    title='sign in'\r\n                    color='darkviolet'/>\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default LoginScreen\r\n\r\nconst styles = StyleSheet.create({\r\n    loginWrapper: {\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    input: {\r\n        height: 40,\r\n        width: 200,\r\n        margin: 12,\r\n        borderBottomWidth: 1,\r\n        padding: 10,\r\n    },\r\n    buttons: {\r\n        width:170,\r\n        display:'flex',\r\n        flexDirection:'row',\r\n        justifyContent:'space-between',\r\n        marginTop:20,\r\n        paddingRight:10,\r\n    },\r\n    errorView: {\r\n        backgroundColor:'rgba(255, 57, 57, 0.8)', \r\n        padding:5, \r\n        borderRadius:5\r\n    }\r\n})"]},"metadata":{},"sourceType":"module"}