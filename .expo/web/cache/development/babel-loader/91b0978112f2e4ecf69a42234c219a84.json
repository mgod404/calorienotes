{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Button } from 'react-native-paper';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scanned = _useState4[0],\n      setScanned = _useState4[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$BarCodeScanner, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n            case 2:\n              _await$BarCodeScanner = _context.sent;\n              status = _await$BarCodeScanner.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var handleBarCodeScanned = function handleBarCodeScanned(_ref) {\n    var type = _ref.type,\n        data = _ref.data;\n    setScanned(true);\n    alert(\"Bar code with type \" + type + \" and data \" + data + \" has been scanned!\");\n  };\n\n  if (hasPermission === null) {\n    return _jsx(Text, {\n      children: \"Requesting for camera permission\"\n    });\n  }\n\n  if (hasPermission === false) {\n    return _jsx(Text, {\n      children: \"No access to camera\"\n    });\n  }\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(BarCodeScanner, {\n      onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n      style: StyleSheet.absoluteFillObject\n    }), scanned && _jsx(Button, {\n      style: styles.AndroidSafeArea,\n      onPress: function onPress() {\n        return setScanned(false);\n      },\n      children: \"Tap to Scan Again\"\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  AndroidSafeArea: {\n    paddingTop: Platform.OS === \"android\" ? StatusBar.currentHeight : 0,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    backgroundColor: 'darkviolet'\n  }\n});","map":{"version":3,"sources":["/home/dzony/Documents/Site/calorienotes/screens/testscreen.tsx"],"names":["React","useState","useEffect","Button","BarCodeScanner","App","hasPermission","setHasPermission","scanned","setScanned","requestPermissionsAsync","status","handleBarCodeScanned","type","data","alert","styles","container","undefined","StyleSheet","absoluteFillObject","AndroidSafeArea","create","flex","paddingTop","Platform","OS","StatusBar","currentHeight","flexDirection","justifyContent","backgroundColor"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;;;AAEA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,cAAT,QAA+B,sBAA/B;;;AAEA,eAAe,SAASC,GAAT,GAAe;AAC5B,kBAA0CJ,QAAQ,CAAC,IAAD,CAAlD;AAAA;AAAA,MAAOK,aAAP;AAAA,MAAsBC,gBAAtB;;AACA,mBAA8BN,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOO,OAAP;AAAA,MAAgBC,UAAhB;;AAEAP,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC0BE,cAAc,CAACM,uBAAf,EAD1B;;AAAA;AAAA;AACSC,cAAAA,MADT,yBACSA,MADT;AAECJ,cAAAA,gBAAgB,CAACI,MAAM,KAAK,SAAZ,CAAhB;;AAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAID,GALQ,EAKN,EALM,CAAT;;AAOA,MAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,OAAoB;AAAA,QAAjBC,IAAiB,QAAjBA,IAAiB;AAAA,QAAXC,IAAW,QAAXA,IAAW;AAC/CL,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAM,IAAAA,KAAK,yBAAuBF,IAAvB,kBAAwCC,IAAxC,wBAAL;AACD,GAHD;;AAKA,MAAIR,aAAa,KAAK,IAAtB,EAA4B;AAC1B,WAAO,KAAC,IAAD;AAAA;AAAA,MAAP;AACD;;AACD,MAAIA,aAAa,KAAK,KAAtB,EAA6B;AAC3B,WAAO,KAAC,IAAD;AAAA;AAAA,MAAP;AACD;;AAED,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEU,MAAM,CAACC,SAApB;AAAA,eACE,KAAC,cAAD;AACE,MAAA,gBAAgB,EAAET,OAAO,GAAGU,SAAH,GAAeN,oBAD1C;AAEE,MAAA,KAAK,EAAEO,UAAU,CAACC;AAFpB,MADF,EAKGZ,OAAO,IAAI,KAAC,MAAD;AAAQ,MAAA,KAAK,EAAEQ,MAAM,CAACK,eAAtB;AAAuC,MAAA,OAAO,EAAE;AAAA,eAAMZ,UAAU,CAAC,KAAD,CAAhB;AAAA,OAAhD;AAAA;AAAA,MALd;AAAA,IADF;AASD;AAED,IAAMO,MAAM,GAAGG,UAAU,CAACG,MAAX,CAAkB;AAC/BL,EAAAA,SAAS,EAAC;AACRM,IAAAA,IAAI,EAAC;AADG,GADqB;AAI/BF,EAAAA,eAAe,EAAE;AACfG,IAAAA,UAAU,EAAEC,QAAQ,CAACC,EAAT,KAAgB,SAAhB,GAA4BC,SAAS,CAACC,aAAtC,GAAsD,CADnD;AAEfC,IAAAA,aAAa,EAAE,KAFA;AAGfC,IAAAA,cAAc,EAAE,QAHD;AAIfC,IAAAA,eAAe,EAAE;AAJF;AAJc,CAAlB,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Text, View, StyleSheet, StatusBar, Platform } from 'react-native'\r\nimport { Button } from 'react-native-paper'\r\nimport { BarCodeScanner } from 'expo-barcode-scanner'\r\n\r\nexport default function App() {\r\n  const [hasPermission, setHasPermission] = useState(null);\r\n  const [scanned, setScanned] = useState(false);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\r\n      setHasPermission(status === 'granted');\r\n    })();\r\n  }, []);\r\n\r\n  const handleBarCodeScanned = ({ type, data }) => {\r\n    setScanned(true);\r\n    alert(`Bar code with type ${type} and data ${data} has been scanned!`);\r\n  };\r\n\r\n  if (hasPermission === null) {\r\n    return <Text>Requesting for camera permission</Text>;\r\n  }\r\n  if (hasPermission === false) {\r\n    return <Text>No access to camera</Text>;\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <BarCodeScanner\r\n        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\r\n        style={StyleSheet.absoluteFillObject}\r\n      />\r\n      {scanned && <Button style={styles.AndroidSafeArea} onPress={() => setScanned(false)}>Tap to Scan Again</Button>}\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container:{\r\n    flex:1,\r\n  },\r\n  AndroidSafeArea: {\r\n    paddingTop: Platform.OS === \"android\" ? StatusBar.currentHeight : 0,\r\n    flexDirection: 'row',\r\n    justifyContent: 'center',\r\n    backgroundColor: 'darkviolet',\r\n}\r\n})"]},"metadata":{},"sourceType":"module"}