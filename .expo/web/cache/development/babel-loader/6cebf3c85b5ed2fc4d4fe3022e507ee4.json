{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport DatePickerIOS from \"./DatePickerIOS\";\nimport DatePickerAndroid from \"./DatePickerAndroid\";\nimport propTypes from \"./propTypes\";\nimport { colorToHex } from \"./colorToHex\";\nimport { throwIfInvalidProps } from \"./propChecker\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar DatePicker = Platform.select({\n  android: DatePickerAndroid,\n  ios: DatePickerIOS\n});\nDatePicker.propTypes = propTypes;\n\nvar DatePickerWrapper = function DatePickerWrapper(props) {\n  if (__DEV__) throwIfInvalidProps(props);\n  return _jsx(DatePicker, _objectSpread(_objectSpread({\n    ref: props.innerRef\n  }, props), {}, {\n    textColor: colorToHex(props.textColor),\n    fadeToColor: colorToHex(props.fadeToColor),\n    title: getTitle(props),\n    confirmText: props.confirmText ? props.confirmText : 'Confirm',\n    cancelText: props.cancelText ? props.cancelText : 'Cancel',\n    androidVariant: getAndroidVariant(props),\n    minuteInterval: props.minuteInterval ? props.minuteInterval : 1,\n    mode: props.mode ? props.mode : 'datetime'\n  }));\n};\n\nvar getAndroidVariant = function getAndroidVariant(props) {\n  var modal = props.modal,\n      androidVariant = props.androidVariant;\n  if (androidVariant) return androidVariant;\n  return modal ? 'nativeAndroid' : 'iosClone';\n};\n\nvar getTitle = function getTitle(props) {\n  var title = props.title,\n      mode = props.mode;\n  if (title === null) return '';\n  if (title) return title;\n  if (mode === 'time') return 'Select time';\n  return 'Select date';\n};\n\nexport default React.memo(DatePickerWrapper);","map":{"version":3,"sources":["C:/Users/dzony/Documents/calorienotes/node_modules/react-native-date-picker/src/index.js"],"names":["React","DatePickerIOS","DatePickerAndroid","propTypes","colorToHex","throwIfInvalidProps","DatePicker","Platform","select","android","ios","DatePickerWrapper","props","__DEV__","innerRef","textColor","fadeToColor","getTitle","confirmText","cancelText","getAndroidVariant","minuteInterval","mode","modal","androidVariant","title","memo"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAOC,aAAP;AACA,OAAOC,iBAAP;AACA,OAAOC,SAAP;AACA,SAASC,UAAT;AACA,SAASC,mBAAT;;AAEA,IAAMC,UAAU,GAAGC,QAAQ,CAACC,MAAT,CAAgB;AACjCC,EAAAA,OAAO,EAAEP,iBADwB;AAEjCQ,EAAAA,GAAG,EAAET;AAF4B,CAAhB,CAAnB;AAKAK,UAAU,CAACH,SAAX,GAAuBA,SAAvB;;AAEA,IAAMQ,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAW;AACnC,MAAIC,OAAJ,EAAaR,mBAAmB,CAACO,KAAD,CAAnB;AACb,SACE,KAAC,UAAD;AACE,IAAA,GAAG,EAAEA,KAAK,CAACE;AADb,KAEMF,KAFN;AAGE,IAAA,SAAS,EAAER,UAAU,CAACQ,KAAK,CAACG,SAAP,CAHvB;AAIE,IAAA,WAAW,EAAEX,UAAU,CAACQ,KAAK,CAACI,WAAP,CAJzB;AAKE,IAAA,KAAK,EAAEC,QAAQ,CAACL,KAAD,CALjB;AAME,IAAA,WAAW,EAAEA,KAAK,CAACM,WAAN,GAAoBN,KAAK,CAACM,WAA1B,GAAwC,SANvD;AAOE,IAAA,UAAU,EAAEN,KAAK,CAACO,UAAN,GAAmBP,KAAK,CAACO,UAAzB,GAAsC,QAPpD;AAQE,IAAA,cAAc,EAAEC,iBAAiB,CAACR,KAAD,CARnC;AASE,IAAA,cAAc,EAAEA,KAAK,CAACS,cAAN,GAAuBT,KAAK,CAACS,cAA7B,GAA8C,CAThE;AAUE,IAAA,IAAI,EAAET,KAAK,CAACU,IAAN,GAAaV,KAAK,CAACU,IAAnB,GAA0B;AAVlC,KADF;AAcD,CAhBD;;AAkBA,IAAMF,iBAAiB,GAAG,SAApBA,iBAAoB,CAACR,KAAD,EAAW;AACnC,MAAQW,KAAR,GAAkCX,KAAlC,CAAQW,KAAR;AAAA,MAAeC,cAAf,GAAkCZ,KAAlC,CAAeY,cAAf;AACA,MAAIA,cAAJ,EAAoB,OAAOA,cAAP;AACpB,SAAOD,KAAK,GAAG,eAAH,GAAqB,UAAjC;AACD,CAJD;;AAMA,IAAMN,QAAQ,GAAG,SAAXA,QAAW,CAACL,KAAD,EAAW;AAC1B,MAAQa,KAAR,GAAwBb,KAAxB,CAAQa,KAAR;AAAA,MAAeH,IAAf,GAAwBV,KAAxB,CAAeU,IAAf;AACA,MAAIG,KAAK,KAAK,IAAd,EAAoB,OAAO,EAAP;AACpB,MAAIA,KAAJ,EAAW,OAAOA,KAAP;AACX,MAAIH,IAAI,KAAK,MAAb,EAAqB,OAAO,aAAP;AACrB,SAAO,aAAP;AACD,CAND;;AAQA,eAAetB,KAAK,CAAC0B,IAAN,CAAWf,iBAAX,CAAf","sourcesContent":["import React from 'react'\nimport { Platform } from 'react-native'\nimport DatePickerIOS from './DatePickerIOS'\nimport DatePickerAndroid from './DatePickerAndroid'\nimport propTypes from './propTypes'\nimport { colorToHex } from './colorToHex'\nimport { throwIfInvalidProps } from './propChecker'\n\nconst DatePicker = Platform.select({\n  android: DatePickerAndroid,\n  ios: DatePickerIOS,\n})\n\nDatePicker.propTypes = propTypes\n\nconst DatePickerWrapper = (props) => {\n  if (__DEV__) throwIfInvalidProps(props)\n  return (\n    <DatePicker\n      ref={props.innerRef}\n      {...props}\n      textColor={colorToHex(props.textColor)}\n      fadeToColor={colorToHex(props.fadeToColor)}\n      title={getTitle(props)}\n      confirmText={props.confirmText ? props.confirmText : 'Confirm'}\n      cancelText={props.cancelText ? props.cancelText : 'Cancel'}\n      androidVariant={getAndroidVariant(props)}\n      minuteInterval={props.minuteInterval ? props.minuteInterval : 1}\n      mode={props.mode ? props.mode : 'datetime'}\n    />\n  )\n}\n\nconst getAndroidVariant = (props) => {\n  const { modal, androidVariant } = props\n  if (androidVariant) return androidVariant\n  return modal ? 'nativeAndroid' : 'iosClone'\n}\n\nconst getTitle = (props) => {\n  const { title, mode } = props\n  if (title === null) return ''\n  if (title) return title\n  if (mode === 'time') return 'Select time'\n  return 'Select date'\n}\n\nexport default React.memo(DatePickerWrapper)\n"]},"metadata":{},"sourceType":"module"}